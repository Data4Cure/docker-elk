input {
	tcp {
		port => 5044
		codec => json
#		ssl_enable => true
#		ssl_cert => "/etc/pki/tls/certs/logstash-forwarder.crt"
#		ssl_key => "/etc/pki/tls/private/logstash-forwarder.key"
	}
	beats {
		port => 15044
	}
}

filter {
  mutate {
    add_field => {
      index => "logstash-other"
    }
  }
  if "audit" in [tags] {
    mutate {
      update => {
        index => 'logstash-audit'
      }
    }
  }
  if [type] in ["linux-syslog", "auth-log", "mail-log"] {
    mutate {
      update => {
        index => 'logstash-syslog-other'
      }
    }
    if [type] == "auth-log" {
      mutate {
        update => {
          index => 'logstash-syslog-auth'
        }
      }
    }
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
      overwrite => [ "message" ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
#    grok {
#      match => { "message" => "Accepted %{USER:user}" }
#    }
  }
  if [type] == "nginx-access" {
     mutate {
       update => {
         index => 'logstash-nginx'
       }
     }
     grok {
     	  match => [ "message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}"]
	  overwrite => [ "message" ]
     }
     mutate {
     	    convert => ["response", "integer"]
	    convert => ["bytes", "integer"]
	    convert => ["responsetime", "float"]
     }
     geoip {
     	   source => "clientip"
	   target => "geoip"
	   add_tag => [ "nginx-geoip" ]
     }
     date {
     	  match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
	  remove_field => [ "timestamp" ]
     }
     useragent {
     	  source => "agent"
     }
  }
  if [type] == "nginx-error" {
     mutate {
       update => {
         index => 'logstash-nginx'
       }
     }
     grok {
     	  match => [ "message" , "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<client>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request})?(?:, upstream: \"%{URI:upstream}\")?(?:, host: %{QS:host})?(?:, referrer: \"%{URI:referrer}\")?"]
	  overwrite => [ "message" ]
     }
     geoip {
     	   source => "client"
	   target => "geoip"
	   add_tag => [ "nginx-geoip" ]
     }
     date {
     	  match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss" ]
	  remove_field => [ "timestamp" ]
     }
  }
#    geoip {
#      source => "[ip]"
#      target => "geoip"
#      database => "/etc/logstash/GeoLiteCity.dat"
#      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
#      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
#    }
#    mutate {
#      convert => [ "[geoip][coordinates]", "float"]
#    }
#    geoip {
#      source => "real_ip"
#      target => "real_geoip"
#      database => "/etc/logstash/GeoLiteCity.dat"
#      add_field => [ "[real_geoip][coordinates]", "%{[real_geoip][longitude]}" ]
#      add_field => [ "[real_geoip][coordinates]", "%{[real_geoip][latitude]}"  ]
#    }
#    mutate {
#      convert => [ "[real_geoip][coordinates]", "float"]
#    }
}

output {
	elasticsearch {
		user => "logstash"
		password => "PLACEHOLDER"
		hosts => "elasticsearch:9200"
		truststore => "/etc/logstash/conf.d/truststore.jks"
		truststore_password => "PLACEHOLDER"
		index => "%{index}-%{+YYYY.MM.dd}"
	}
}
